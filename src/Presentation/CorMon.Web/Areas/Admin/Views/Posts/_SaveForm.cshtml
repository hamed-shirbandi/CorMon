@model PostInput
@{
}

<form class="form" asp-action="@Model.ActionName" data-ajax="true" data-ajax-method="POST" data-ajax-loading="#global-ajax-loading">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)

    <div class="grid-container pad-t-20">
        <div class="grid-75">
            <div class="block">
                <div class="block-content no-pad">
                    <ul class="tabs">
                        <li class="tab"><a href="#tab-1" class="active">ویرایشگر</a></li>
                        <li class="tab"><a href="#tab-2">بهینه سازی</a></li>
                    </ul>
                </div>
                <div id="tab-1">
                    <div class="block-content">
                        @Html.TextBoxFor(model => model.Title, new { @class = "form-input-1", placeholder = "عنوان مطلب" })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "form-message is-error" })

                        @Html.TextAreaFor(model => model.Content, new { @class = "content-editor" })
                        @Html.ValidationMessageFor(model => model.Content, "", new { @class = "form-message is-error" })
                    </div>
                </div>
                <div id="tab-2">
                    <div class="block-content">
                        <div class="grid-50">

                            @Html.LabelFor(model => model.PublishDateTime, new { @class = "" })
                            @Html.TextBoxFor(model => model.PublishDateTime, new { @class = "form-input-1 dateTimePicker", id = "Publish-Date-Time" })
                            @Html.ValidationMessageFor(model => model.PublishDateTime, "", new { @class = "form-message is-error" })

                            @Html.LabelFor(model => model.CreateDateTime, new { @class = "" })
                            @Html.TextBoxFor(model => model.CreateDateTime, new { @class = "form-input-1", @readonly = "readonly", disabled = "disabled", id = "Date-Created" })

                            @Html.LabelFor(model => model.ModifiedDateTime, new { @class = "" })
                            @Html.TextBoxFor(model => model.ModifiedDateTime, new { @class = "form-input-1", @readonly = "readonly", disabled = "disabled", id = "Modifie-Date" })



                            @Html.LabelFor(model => model.UrlTitle, new { @class = "" })
                            @Html.TextBoxFor(model => model.UrlTitle, new { @class = "form-input-1", id = "" })
                            @Html.ValidationMessageFor(model => model.UrlTitle, "", new { @class = "form-message is-error" })



                            @Html.LabelFor(model => model.MetaDescription, new { @class = "" })
                            @Html.TextBoxFor(model => model.MetaDescription, new { @class = "form-input-1" })
                            @Html.ValidationMessageFor(model => model.MetaDescription, "", new { @class = "form-message is-error" })

                            @Html.LabelFor(model => model.MetaKeyWords, new { @class = "" })
                            @Html.TextBoxFor(model => model.MetaKeyWords, new { id = "meta-tags-input", @class = "form-input-1" })
                            @Html.ValidationMessageFor(model => model.MetaKeyWords, "", new { @class = "form-message is-error" })

                            @Html.LabelFor(model => model.MetaRobots, new { @class = "" })
                            @Html.DropDownListFor(m => m.MetaRobots, Html.GetEnumSelectList(typeof(RobotsState)), new { @class = "form-input-1", id = "publish-dropdown" })
                        </div>
                    </div>
                </div>
            </div>
        </div><!--/ post-content-->
        <div class="grid-25">
            <div class="block">
                <div class="block-content no-pad">
                    <ul class="tabs">
                        <li class="tab"><a href="#conf-1" class="active">عمومی</a></li>
                        <li class="tab"><a href="#conf-2">پیشرفته</a></li>
                    </ul>
                </div>
                <div class="block-content">
                    <div id="conf-1">
                        @if (Model.ActionName == "Update" && Model.PublishStatus == PublishStatus.Publish && Model.PublishDateTime <= DateTime.Now && Model.IsTrashed == false)
                        {
                            @Html.ActionLink(linkText: "نمایش زنده", actionName: "article", controllerName: "blog", routeValues: new { Area = "", id = Model.Id, title = Model.UrlTitle }, htmlAttributes: new { target = "_blank", @class = "btn btn-warning btn-block" })

                        }

                        @Html.DropDownListFor(m => m.PublishStatus, Html.GetEnumSelectList(typeof(PublishStatus)), new { @class = "form-input-1", id = "publish-dropdown" })
                        @Html.DropDownListFor(m => m.PostLevel, Html.GetEnumSelectList(typeof(PostLevel)), new { @class = "form-input-1", id = "" })

                        <button type="submit" class="btn btn-success btn-block">انتشار</button>
                        @if (!string.IsNullOrEmpty(Model.Id))
                        {
                            <a data-ajax="true" data-ajax-loading="#global-ajax-loading" data-ajax-method="POST" data-ajax-confirm="آیا از حذف پست مطمئن هستید؟" href="@Url.Action( "Delete", new { id = Model.Id }) " class=" btn btn-danger btn-block">
                                حذف
                            </a>
                            @if (Model.IsTrashed)
                            {
                                <a data-ajax="true" data-ajax-loading="#global-ajax-loading" data-ajax-method="POST" href="@Url.Action( "Recycle", new { id = Model.Id }) " class=" btn btn-success btn-block">
                                    بازیافت
                                </a>
                            }
                        }
          
                        <div class="line"></div>
                        @Html.ActionLink("صفحه برچسب ها", "Index", "Taxonomy", new { type = TaxonomyType.Tag }, new { @class = "pull-left", target = "_blank" })
                        <h4> برچسب</h4>
                        <div id="tags">
                            <input type="text" name="tags-input" data-provide="typeahead" id="tags-input" value="" class="tm-input typeahead form-input-1" placeholder="نام برچسب" />
                            <span class="input-group-btn">
                                <button type="button" class="btn btn-primary btn-block" id="add-tag">اضافه</button>
                            </span>
                        </div>
                        <div id="tag-container">

                        </div>
                        <div class="line"></div>
                        @Html.ActionLink("صفحه گروه ها", "Index", "Taxonomy", new { type = TaxonomyType.Category }, new { @class = "pull-left", target = "_blank" })
                        <h4>گروه </h4>
                        @if (Model.Categories.Length > 0)
                        {
                            <ul class="list-reset">
                                @for (int i = 0; i < Model.Categories.Length; i++)
                                {
                                    <li>
                                        @Html.CheckBoxFor(model => model.Categories[i].Selected)
                                        @Html.DisplayFor(model => model.Categories[i].Text)
                                        @Html.HiddenFor(model => model.Categories[i].Value)
                                    </li>
                                }

                            </ul>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <small>هیچ گروهی وجود ندارد</small>
                            </div>
                        }
                    </div>
                    <div id="conf-2" class="tab-panel">

                    </div>


                </div>
            </div>
        </div>
    </div>

</form>





